# streamlit_app.py (RU, preloaded, simplified UI)
# -------------------------------------------------------------
# –ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ä–æ–¥–æ—Å–ª–æ–≤–Ω—ã—Ö (–±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤)
# –î–∞–Ω–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ ./db_lineages (–≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏).
# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Å–∞–π–¥–±–∞—Ä–µ.
# -------------------------------------------------------------

from __future__ import annotations

import csv
import io
import json
import os
import re
import textwrap
from datetime import datetime
from pathlib import Path
from typing import Callable, Dict, List, Set, Tuple

import matplotlib.pyplot as plt
import networkx as nx
import numpy as np
import pandas as pd
import streamlit as st
from urllib.parse import urlencode, urlsplit
try:
    from streamlit.runtime.scriptrunner import get_script_run_ctx
except Exception:  # pragma: no cover - —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ streamlit
    get_script_run_ctx = None  # type: ignore
import zipfile
from pyvis.network import Network
from sklearn.metrics import silhouette_samples, silhouette_score

# ---------------------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã -----------------------------------------
DATA_DIR = "db_lineages"      # –ø–∞–ø–∫–∞ —Å CSV –≤–Ω—É—Ç—Ä–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
CSV_GLOB = "*.csv"            # –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –±—Ä–∞—Ç—å
AUTHOR_COLUMN = "candidate_name"
SUPERVISOR_COLUMNS = [f"supervisors_{i}.name" for i in (1, 2)]

BASIC_SCORES_DIR = "basic_scores"  # —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏ –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏–π

FEEDBACK_FILE = Path("feedback.csv")
FEEDBACK_FORM_STATE_KEY = "feedback_form_state"
FEEDBACK_FORM_RESULT_KEY = "feedback_form_result"

# –ü—É–±–ª–∏—á–Ω—ã–π –∞–¥—Ä–µ—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è".
# –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –µ–≥–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
# PUBLIC_APP_URL.
PUBLIC_APP_URL = os.environ.get(
    "PUBLIC_APP_URL",
    "https://lineages-trceuocpnvyaxysnpis72f.streamlit.app/",
).strip().rstrip("/")

# ---------------------- –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã -------------------------------
st.set_page_config(page_title="–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ —Ä–æ–¥–æ—Å–ª–æ–≤–Ω—ã–µ", layout="wide")

# –ü–æ–ª–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π (full-bleed) –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
st.markdown("""
<style>
  iframe {
        width: 100%;
  }
</style>
""", unsafe_allow_html=True)


def _default_feedback_state() -> Dict[str, str]:
    return {"name": "", "email": "", "message": ""}


def _get_feedback_state() -> Dict[str, str]:
    state = st.session_state.get(FEEDBACK_FORM_STATE_KEY)
    if isinstance(state, dict):
        return state
    state = _default_feedback_state()
    st.session_state[FEEDBACK_FORM_STATE_KEY] = state
    return state


def _store_feedback(name: str, email: str, message: str) -> None:
    FEEDBACK_FILE.parent.mkdir(parents=True, exist_ok=True)
    record = [
        datetime.utcnow().isoformat(timespec="seconds") + "Z",
        name.strip(),
        email.strip(),
        message.replace("\r\n", "\n").replace("\r", "\n"),
    ]
    file_exists = FEEDBACK_FILE.exists()
    with FEEDBACK_FILE.open("a", newline="", encoding="utf-8") as fp:
        writer = csv.writer(fp)
        if not file_exists:
            writer.writerow(["timestamp", "name", "email", "message"])
        writer.writerow(record)


def _trigger_rerun() -> None:
    try:  # Streamlit >= 1.32
        st.rerun()
    except AttributeError:  # pragma: no cover - —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ Streamlit
        st.experimental_rerun()  # type: ignore[attr-defined]


def feedback_button() -> None:
    @st.dialog("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
    def _show_feedback_dialog() -> None:
        st.write("–ë—É–¥–µ–º —Ä–∞–¥—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–∞—Ö.")

        feedback_state = _get_feedback_state()
        pending_message = st.session_state.pop(FEEDBACK_FORM_RESULT_KEY, None)
        if pending_message:
            status, context = pending_message
            if status == "success":
                st.success(
                    f"–°–ø–∞—Å–∏–±–æ, {context or '–∫–æ–ª–ª–µ–≥–∞'}! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
                )
            elif status == "warning":
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ ¬´–°–æ–æ–±—â–µ–Ω–∏–µ¬ª.")

        with st.form(key="feedback_form"):
            name = st.text_input("–ò–º—è", value=feedback_state.get("name", ""))
            email = st.text_input("E-mail", value=feedback_state.get("email", ""))
            message = st.text_area(
                "–°–æ–æ–±—â–µ–Ω–∏–µ", value=feedback_state.get("message", ""), height=180
            )
            submitted = st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")

        if submitted:
            feedback_state = {
                "name": name,
                "email": email,
                "message": message,
            }
            if message.strip():
                _store_feedback(name, email, message)
                st.session_state[FEEDBACK_FORM_RESULT_KEY] = ("success", name)
                st.session_state[FEEDBACK_FORM_STATE_KEY] = _default_feedback_state()
            else:
                st.session_state[FEEDBACK_FORM_RESULT_KEY] = ("warning", None)
                st.session_state[FEEDBACK_FORM_STATE_KEY] = feedback_state
            _trigger_rerun()

    if st.button("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", key="feedback_button", use_container_width=True):
        _show_feedback_dialog()


header_left, header_right = st.columns([0.78, 0.22])
with header_left:
    st.title("üìö –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏—Ö —Ä–æ–¥–æ—Å–ª–æ–≤–Ω—ã—Ö")
    st.caption(
        "–î–∞–Ω–Ω—ã–µ –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–ø–∞–ø–∫–∞ db_lineages). –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ —Å–æ–∑–¥–∞–π—Ç–µ –¥–µ—Ä–µ–≤—å—è."
    )
with header_right:
    feedback_button()

# ---------------------- –•–µ–ª–ø–µ—Ä—ã -------------------------------------------

def _norm(s: str) -> str:
    return re.sub(r"\s+", " ", s.replace(".", " ").strip().lower())


def _split(full: str) -> Tuple[str, str, str]:
    p = full.split()
    p += ["", "", ""]
    return (p[0], p[1] if len(p) > 1 else "", p[2] if len(p) > 2 else "")


def variants(full: str) -> Set[str]:
    last, first, mid = _split(full.strip())
    fi, mi = first[:1], mid[:1]
    init = fi + mi
    init_dots = ".".join(init) + "." if init else ""
    return {
        v.strip()
        for v in {
            full,
            f"{last} {first} {mid}".strip(),
            f"{last} {init}",
            f"{last} {init_dots}",
            f"{init} {last}",
            f"{init_dots} {last}",
        }
        if v
    }


def degree_level(row: pd.Series) -> str:
    raw = str(row.get("degree.degree_level", ""))
    value = raw.strip().lower()
    if value.startswith("–¥–æ–∫"):
        return "doctor"
    if value.startswith("–∫–∞–Ω"):
        return "candidate"
    return ""


def is_doctor(row: pd.Series) -> bool:
    return degree_level(row) == "doctor"


def is_candidate(row: pd.Series) -> bool:
    return degree_level(row) == "candidate"


TREE_OPTIONS: List[tuple[str, str, Callable[[pd.Series], bool] | None]] = [
    ("–û–±—â–µ–µ –¥–µ—Ä–µ–≤–æ", "general", None),
    ("–î–µ—Ä–µ–≤–æ –¥–æ–∫—Ç–æ—Ä–æ–≤ –Ω–∞—É–∫", "doctors", is_doctor),
    ("–î–µ—Ä–µ–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞—É–∫", "candidates", is_candidate),
]


def build_index(df: pd.DataFrame, supervisor_cols: List[str]) -> Dict[str, Set[int]]:
    idx: Dict[str, Set[int]] = {}
    for col in supervisor_cols:
        if col not in df.columns:
            continue
        for i, raw in df[col].dropna().items():
            for v in variants(str(raw)):
                idx.setdefault(_norm(v), set()).add(i)
    return idx


def rows_for(df: pd.DataFrame, index: Dict[str, Set[int]], name: str) -> pd.DataFrame:
    hits: Set[int] = set()
    for v in variants(name):
        hits.update(index.get(_norm(v), set()))
    return df.loc[list(hits)] if hits else df.iloc[0:0]


def lineage(
    df: pd.DataFrame,
    index: Dict[str, Set[int]],
    root: str,
    first_level_filter: Callable[[pd.Series], bool] | None = None,
) -> tuple[nx.DiGraph, pd.DataFrame]:
    G = nx.DiGraph()
    selected_indices: Set[int] = set()
    Q, seen = [root], set()
    while Q:
        cur = Q.pop(0)
        if cur in seen:
            continue
        seen.add(cur)
        rows = rows_for(df, index, cur)
        for idx, r in rows.iterrows():
            child = str(r.get(AUTHOR_COLUMN, "")).strip()
            if child:
                if cur == root and first_level_filter is not None:
                    if not first_level_filter(r):
                        continue
                G.add_edge(cur, child)
                Q.append(child)
                selected_indices.add(idx)
    subset = df.loc[sorted(selected_indices)] if selected_indices else df.iloc[0:0]
    return G, subset


def multiline(name: str) -> str:
    return "\n".join(str(name).split())


def slug(s: str) -> str:
    return re.sub(r"[^A-Za-z–ê-–Ø–∞-—è0-9]+", "_", s).strip("_")


def _clean_path(*parts: str) -> str:
    cleaned = "/".join(p.strip("/") for p in parts if p and p.strip("/"))
    return f"/{cleaned}" if cleaned else ""


def _configured_base_url() -> str | None:
    if PUBLIC_APP_URL:
        return PUBLIC_APP_URL
    keys = ("public_base_url", "base_url", "BASE_URL")
    for key in keys:
        try:
            val = st.secrets.get(key)  # type: ignore[attr-defined]
        except Exception:
            val = None
        if val:
            return str(val).rstrip("/")
    for key in ("PUBLIC_BASE_URL", "BASE_URL"):
        val = os.environ.get(key)
        if val:
            return val.rstrip("/")
    return None


def _base_url_from_headers() -> str | None:
    if get_script_run_ctx is None:
        return None
    try:
        ctx = get_script_run_ctx()
    except Exception:
        ctx = None
    if not ctx:
        return None
    headers = getattr(ctx, "request_headers", None)
    if not headers:
        return None
    lowered = {str(k).lower(): str(v) for k, v in headers.items() if v}
    prefix = lowered.get("x-forwarded-prefix", "")
    base_path = st.get_option("server.baseUrlPath") or ""

    host = lowered.get("x-forwarded-host") or lowered.get("host")
    if host:
        proto = lowered.get("x-forwarded-proto")
        if proto:
            proto = proto.split(",")[0].strip()
        else:
            forwarded_port = lowered.get("x-forwarded-port")
            proto = "https" if forwarded_port == "443" or host.endswith(":443") else "http"
        path = _clean_path(prefix, base_path)
        return f"{proto}://{host}{path}".rstrip("/")

    referer = lowered.get("referer") or lowered.get("origin")
    if not referer:
        return None
    parsed = urlsplit(referer)
    if not parsed.scheme or not parsed.netloc:
        return None
    path = _clean_path(prefix or parsed.path, base_path)
    base = f"{parsed.scheme}://{parsed.netloc}"
    return f"{base}{path}".rstrip("/")


def _base_url_from_options() -> str | None:
    try:
        addr = st.get_option("browser.serverAddress")
        port = st.get_option("browser.serverPort")
    except Exception:
        return None
    if not addr:
        return None
    base_path = st.get_option("server.baseUrlPath") or ""
    proto = "https" if str(port) == "443" else "http"
    if (proto == "https" and str(port) in ("", "443")) or (proto == "http" and str(port) in ("", "80")):
        host = addr
    else:
        host = f"{addr}:{port}"
    path = _clean_path(base_path)
    return f"{proto}://{host}{path}".rstrip("/")


def build_share_url(names: List[str]) -> str:
    params = urlencode([("root", n) for n in names])
    query = f"?{params}" if params else ""
    base_url = _configured_base_url() or _base_url_from_headers() or _base_url_from_options()
    return f"{base_url}{query}" if base_url else query


def share_button(names: List[str], key: str) -> None:
    @st.dialog("–°—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞")
    def _show_dialog(url: str) -> None:
        st.text_input("URL", url, key=f"share_url_{key}")

    if st.button("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", key=key):
        try:
            st.query_params.clear()
            st.query_params["root"] = names
        except Exception:
            try:
                st.experimental_set_query_params(root=names)
            except Exception:
                pass
        url = build_share_url(names)
        _show_dialog(url)


# --------- –†–∏—Å–æ–≤–∞–Ω–∏–µ PNG (—É–º–µ–Ω—å—à–∞–µ–º —à—Ä–∏—Ñ—Ç—ã –∏ —É–∑–ª—ã) -----------------------

def _hierarchy_pos(G: nx.DiGraph, root: str):
    from collections import deque
    levels: Dict[int, List[str]] = {}
    q = deque([(root, 0)])
    seen = set()
    while q:
        n, d = q.popleft()
        if n in seen:
            continue
        seen.add(n)
        levels.setdefault(d, []).append(n)
        for c in G.successors(n):
            q.append((c, d + 1))
    pos: Dict[str, tuple[float, float]] = {}
    for depth, nodes in levels.items():
        width = len(nodes)
        for i, n in enumerate(nodes):
            x = (i + 1) / (width + 1)
            y = -depth
            pos[n] = (x, y)
    return pos


def draw_matplotlib(G: nx.DiGraph, root: str) -> plt.Figure:
    if G.number_of_nodes() == 0:
        fig = plt.figure(figsize=(6, 3.5))
        plt.axis("off")
        plt.text(0.5, 0.5, "–ü–æ—Ç–æ–º–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", ha="center", va="center")
        return fig
    try:
        import networkx.drawing.nx_pydot as nx_pydot  # type: ignore
        pos = nx_pydot.graphviz_layout(G, prog="dot")
    except Exception:
        pos = _hierarchy_pos(G, root)
    fig = plt.figure(figsize=(max(6, len(G) * 0.45), 6))
    nx.draw(
        G,
        pos,
        with_labels=True,
        labels={n: multiline(n) for n in G.nodes},
        node_color="#ADD8E6",
        node_size=2000,   # –±—ã–ª–æ 3200 ‚Üí –Ω–µ–º–Ω–æ–≥–æ –º–µ–Ω—å—à–µ
        font_size=7,      # –∑–∞–º–µ—Ç–Ω–æ –º–µ–Ω—å—à–µ —à—Ä–∏—Ñ—Ç
        arrows=True,
    )
    plt.title(f"–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∞—è —Ä–æ–¥–æ—Å–ª–æ–≤–Ω–∞—è ‚Äì {root}", fontsize=10)
    plt.tight_layout()
    return fig


# --------- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è HTML-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è (—É–º–µ–Ω—å—à–∞–µ–º —à—Ä–∏—Ñ—Ç—ã) -----------

def build_pyvis_html(G: nx.DiGraph, root: str) -> str:
    net = Network(height="1000px", width="100%", directed=True, bgcolor="#ffffff")
    net.toggle_physics(True)

    children_map: Dict[str, List[str]] = {}
    nodes_payload: List[str] = []
    for n in G.nodes:
        node_id = str(n)
        nodes_payload.append(node_id)
        successors = [str(child) for child in G.successors(n)]
        if successors:
            children_map[node_id] = successors
        net.add_node(
            node_id,
            label=multiline(n),
            title=str(n),
            shape="box",
            color="#ADD8E6",
        )

    edges_payload: List[Dict[str, str]] = []
    for u, v in G.edges:
        src = str(u)
        dst = str(v)
        edges_payload.append({"from": src, "to": dst})
        net.add_edge(src, dst, arrows="to")

    vis_opts = {
        "nodes": {"font": {"size": 12}},  # —à—Ä–∏—Ñ—Ç –ø–æ–º–µ–Ω—å—à–µ
        "layout": {"hierarchical": {"direction": "UD", "sortMethod": "directed"}},
        "interaction": {"hover": True},
        "physics": {
            "hierarchicalRepulsion": {
                "nodeDistance": 140,
                "springLength": 160,
                "springConstant": 0.01,
            },
            "solver": "hierarchicalRepulsion",
            "stabilization": {"iterations": 200},
            "minVelocity": 0.1,
        },
    }
    net.set_options(json.dumps(vis_opts))

    try:
        html = net.generate_html()  # type: ignore[attr-defined]
    except Exception:
        tmp = Path("_tmp.html")
        net.save_graph(str(tmp))
        html = tmp.read_text(encoding="utf-8")
        try:
            tmp.unlink()
        except Exception:
            pass

    config = {
        "root": str(root),
        "childrenMap": children_map,
        "nodes": nodes_payload,
        "edges": edges_payload,
    }
    config_json = json.dumps(config, ensure_ascii=False)

    injection = textwrap.dedent(
        """
        <style>
          #mynetwork .branch-toggle-layer {
            position: absolute;
            inset: 0;
            pointer-events: none;
          }

          #mynetwork .branch-toggle {
            position: absolute;
            transform: translate(-50%, 0);
            border-radius: 50%;
            border: 1px solid #2d3f5f;
            background: #ffffff;
            color: #2d3f5f;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            pointer-events: auto;
            user-select: none;
            padding: 0;
            min-width: 16px;
            min-height: 16px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);
            transition: background-color 0.2s ease, color 0.2s ease;
            z-index: 10;
          }

          #mynetwork .branch-toggle:hover {
            background: #2d3f5f;
            color: #ffffff;
          }
        </style>
        <script>
        (function() {
          const config = __CONFIG_JSON__;
          const network = window.network;
          if (!network || !network.body || !network.body.data) {
            return;
          }
          const container = document.getElementById("mynetwork");
          if (!container) {
            return;
          }

          const childrenMap = config.childrenMap || {};
          const rootId = config.root;
          const originalNodes = Array.isArray(config.nodes) ? config.nodes : [];
          const originalEdges = Array.isArray(config.edges) ? config.edges : [];
          const originalNodeSet = new Set(originalNodes);
          const originalEdgeSet = new Set(
            originalEdges.map(function(edge) {
              return edge.from + "\u2192" + edge.to;
            })
          );

          const toggleLayer = document.createElement("div");
          toggleLayer.className = "branch-toggle-layer";
          container.appendChild(toggleLayer);

          const toggles = new Map();
          const collapsed = {};
          const descendantCache = {};

          function getDescendants(nodeId) {
            if (descendantCache[nodeId]) {
              return descendantCache[nodeId];
            }
            const result = [];
            const queue = (childrenMap[nodeId] || []).slice();
            const seen = new Set();
            while (queue.length) {
              const current = queue.shift();
              if (seen.has(current)) {
                continue;
              }
              seen.add(current);
              result.push(current);
              const children = childrenMap[current];
              if (children && children.length) {
                queue.push.apply(queue, children);
              }
            }
            descendantCache[nodeId] = result;
            return result;
          }

          function updateButton(nodeId) {
            const button = toggles.get(nodeId);
            if (!button) {
              return;
            }
            button.textContent = collapsed[nodeId] ? "+" : "\u2212";
            const node = network.body.data.nodes.get(nodeId);
            if (node && node.hidden) {
              button.style.display = "none";
            } else {
              button.style.display = "flex";
            }
          }

          function setNodesHidden(ids, hidden) {
            if (!ids.length) {
              return;
            }
            const updates = [];
            ids.forEach(function(id) {
              if (!originalNodeSet.has(id)) {
                return;
              }
              updates.push({ id: id, hidden: hidden });
            });
            if (updates.length) {
              network.body.data.nodes.update(updates);
            }
          }

          function setEdgesHidden(idSet, hidden) {
            if (!idSet.size) {
              return;
            }
            const updates = [];
            network.body.data.edges.forEach(function(edge) {
              const key = edge.from + "\u2192" + edge.to;
              if (!originalEdgeSet.has(key)) {
                return;
              }
              if (idSet.has(edge.from) || idSet.has(edge.to)) {
                updates.push({ id: edge.id, hidden: hidden });
              }
            });
            if (updates.length) {
              network.body.data.edges.update(updates);
            }
          }

          function hideBranch(nodeId) {
            if (!childrenMap[nodeId] || !childrenMap[nodeId].length) {
              return;
            }
            collapsed[nodeId] = true;
            const descendants = getDescendants(nodeId);
            const idSet = new Set(descendants);
            setNodesHidden(descendants, true);
            setEdgesHidden(idSet, true);
            descendants.forEach(function(id) {
              const button = toggles.get(id);
              if (button) {
                button.style.display = "none";
              }
            });
            updateButton(nodeId);
            window.requestAnimationFrame(updatePositions);
          }

          function showBranch(nodeId) {
            if (!childrenMap[nodeId] || !childrenMap[nodeId].length) {
              return;
            }
            collapsed[nodeId] = false;
            const descendants = getDescendants(nodeId);
            const idSet = new Set(descendants);
            setNodesHidden(descendants, false);
            setEdgesHidden(idSet, false);
            updateButton(nodeId);
            descendants.forEach(function(id) {
              updateButton(id);
            });
            descendants.forEach(function(id) {
              if (collapsed[id]) {
                hideBranch(id);
                const button = toggles.get(id);
                if (button) {
                  button.style.display = "flex";
                }
              }
            });
            if (descendants.length > 8) {
              network.stabilize();
            }
            window.requestAnimationFrame(updatePositions);
          }

          function toggleBranch(nodeId) {
            if (collapsed[nodeId]) {
              showBranch(nodeId);
            } else {
              hideBranch(nodeId);
            }
          }

          function updatePositions() {
            toggles.forEach(function(button, nodeId) {
              const node = network.body.data.nodes.get(nodeId);
              if (!node || node.hidden) {
                return;
              }
              const bounding = network.getBoundingBox(nodeId);
              if (!bounding) {
                return;
              }

              const bottomCenterCanvas = {
                x: (bounding.left + bounding.right) / 2,
                y: bounding.bottom,
              };
              const topLeftDom = network.canvasToDOM({
                x: bounding.left,
                y: bounding.top,
              });
              const bottomRightDom = network.canvasToDOM({
                x: bounding.right,
                y: bounding.bottom,
              });
              const bottomCenterDom = network.canvasToDOM(bottomCenterCanvas);

              const width = bottomRightDom.x - topLeftDom.x;
              const height = bottomRightDom.y - topLeftDom.y;
              let verticalOffset = 14;

              if (Number.isFinite(width) && Number.isFinite(height)) {
                const minDimension = Math.max(0, Math.min(width, height));
                const size = Math.max(16, Math.min(36, minDimension * 0.5));
                const roundedSize = Math.round(size);
                const fontSize = Math.max(9, Math.round(size * 0.45));
                button.style.width = roundedSize + "px";
                button.style.height = roundedSize + "px";
                button.style.fontSize = fontSize + "px";
                verticalOffset = Math.max(10, Math.round(roundedSize / 2 + 6));
              }

              button.style.left = bottomCenterDom.x + "px";
              button.style.top = bottomCenterDom.y + verticalOffset + "px";
            });
          }

          Object.keys(childrenMap).forEach(function(nodeId) {
            if (nodeId === rootId) {
              collapsed[nodeId] = false;
              return;
            }
            if (!childrenMap[nodeId] || !childrenMap[nodeId].length) {
              collapsed[nodeId] = false;
              return;
            }
            const button = document.createElement("button");
            button.type = "button";
            button.className = "branch-toggle";
            button.style.width = "20px";
            button.style.height = "20px";
            button.style.fontSize = "12px";
            button.textContent = "\u2212";
            button.title = "–°–≤–µ—Ä–Ω—É—Ç—å/—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –≤–µ—Ç–∫—É";
            button.addEventListener("click", function(evt) {
              evt.preventDefault();
              evt.stopPropagation();
              toggleBranch(nodeId);
            });
            toggleLayer.appendChild(button);
            toggles.set(nodeId, button);
            collapsed[nodeId] = false;
            updateButton(nodeId);
          });

          if (!toggles.size) {
            return;
          }

          network.on("afterDrawing", updatePositions);
          network.once("stabilizationIterationsDone", function() {
            window.requestAnimationFrame(updatePositions);
          });
          window.addEventListener("resize", updatePositions);
          updatePositions();
        })();
        </script>
        """
    ).replace("__CONFIG_JSON__", config_json)

    if "</body>" in html:
        html = html.replace("</body>", f"{injection}\n</body>")
    else:
        html += injection

    return html


# ---------------------- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ----------------------------------
@st.cache_data(show_spinner=False)
def load_data() -> pd.DataFrame:
    base = Path(DATA_DIR).expanduser().resolve()
    files = sorted(base.glob(CSV_GLOB))
    if not files:
        raise FileNotFoundError(f"–í {base} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ CSV –ø–æ –º–∞—Å–∫–µ '{CSV_GLOB}'")

    # –ø—Ä–æ—Å—Ç–∞—è –∞–≤—Ç–æ‚Äë–¥–µ—Ç–µ–∫—Ü–∏—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –ø–æ –ø–µ—Ä–≤–æ–º—É —Ñ–∞–π–ª—É
    try:
        sample = pd.read_csv(files[0], nrows=5, dtype=str)
        sep = ";" if sample.shape[1] == 1 else ","
    except Exception:
        sep = ","

    frames = [pd.read_csv(f, dtype=str, keep_default_na=False, sep=sep) for f in files]
    return pd.concat(frames, ignore_index=True)


@st.cache_data(show_spinner=False)
def load_basic_scores() -> pd.DataFrame:
    base = Path(BASIC_SCORES_DIR).expanduser().resolve()
    files = sorted(base.glob("*.csv"))
    if not files:
        raise FileNotFoundError(
            f"–í {base} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ CSV —Å —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏"
        )

    frames: list[pd.DataFrame] = []
    for file in files:
        frame = pd.read_csv(file)
        if "Code" not in frame.columns:
            raise KeyError(f"–í —Ñ–∞–π–ª–µ {file.name} –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ 'Code'")
        frames.append(frame)

    scores = pd.concat(frames, ignore_index=True)
    scores = scores.dropna(subset=["Code"])
    scores["Code"] = scores["Code"].astype(str).str.strip()
    scores = scores[scores["Code"].str.len() > 0]
    scores = scores.drop_duplicates(subset="Code", keep="first")

    feature_columns = [c for c in scores.columns if c != "Code"]
    if not feature_columns:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã —Å —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏")

    scores[feature_columns] = scores[feature_columns].apply(
        pd.to_numeric, errors="coerce"
    )
    scores[feature_columns] = scores[feature_columns].fillna(0.0)

    return scores


def gather_school_dataset(
    df: pd.DataFrame,
    index: Dict[str, Set[int]],
    root: str,
    scores: pd.DataFrame,
) -> tuple[pd.DataFrame, pd.DataFrame, int]:
    _, subset = lineage(df, index, root)
    if subset.empty:
        empty = pd.DataFrame(columns=[*scores.columns, "school", AUTHOR_COLUMN])
        return empty, empty, 0

    working = subset[["Code", AUTHOR_COLUMN]].copy()
    working["Code"] = working["Code"].astype(str).str.strip()
    working = working[working["Code"].str.len() > 0]
    codes = working["Code"].unique().tolist()

    dataset = scores[scores["Code"].isin(codes)].copy()
    dataset["school"] = root
    dataset = dataset.merge(
        working.drop_duplicates(subset="Code"), on="Code", how="left"
    )

    missing_codes = sorted(set(codes) - set(dataset["Code"]))
    missing_info = (
        working[working["Code"].isin(missing_codes)]
        .drop_duplicates(subset="Code")
        .rename(columns={AUTHOR_COLUMN: "candidate_name"})
    )

    dataset = dataset.rename(columns={AUTHOR_COLUMN: "candidate_name"})
    if "candidate_name" not in dataset.columns:
        dataset["candidate_name"] = None

    return dataset, missing_info, len(codes)


def make_silhouette_plot(
    sample_scores: np.ndarray,
    labels: np.ndarray,
    school_order: list[str],
    overall_score: float,
    metric: str,
) -> plt.Figure:
    fig, ax = plt.subplots(figsize=(8, 5))
    y_lower = 10
    colors = [plt.cm.tab10(i) for i in range(len(school_order))]

    for idx, school in enumerate(school_order):
        mask = labels == idx
        cluster_scores = sample_scores[mask]
        if cluster_scores.size == 0:
            continue
        cluster_scores = np.sort(cluster_scores)
        size = cluster_scores.size
        y_upper = y_lower + size
        ax.fill_betweenx(
            np.arange(y_lower, y_upper),
            0,
            cluster_scores,
            facecolor=colors[idx],
            alpha=0.7,
        )
        ax.text(
            -0.98,
            y_lower + size / 2,
            f"{school} (n={size})",
            fontsize=10,
            va="center",
        )
        y_lower = y_upper + 10

    ax.axvline(x=overall_score, color="gray", linestyle="--", linewidth=1.5)
    ax.set_xlim([-1, 1])
    ax.set_xlabel("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∏–ª—É—ç—Ç–∞")
    ax.set_ylabel("–î–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏–∏")
    ax.set_title(f"Silhouette plot (–º–µ—Ç—Ä–∏–∫–∞: {metric})")
    ax.set_yticks([])
    ax.grid(axis="x", linestyle=":", alpha=0.4)
    fig.tight_layout()
    return fig


# ====================== –ò–ù–¢–ï–†–§–ï–ô–° (–±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–π–¥–±–∞—Ä–∞) ============
try:
    df = load_data()
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    st.stop()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
missing = [c for c in [AUTHOR_COLUMN, *SUPERVISOR_COLUMNS] if c not in df.columns]
if missing:
    st.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: " + ", ".join(f"`{c}`" for c in missing))
    st.stop()

# –ò–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º
idx = build_index(df, SUPERVISOR_COLUMNS)

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
all_supervisor_names: Set[str] = set()
for col in SUPERVISOR_COLUMNS:
    all_supervisor_names.update({v for v in df[col].dropna().astype(str).unique() if v})

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (?root=...)
shared_roots = st.query_params.get_all("root")
valid_shared_roots = [r for r in shared_roots if r in all_supervisor_names]
manual_prefill = "\n".join(r for r in shared_roots if r not in all_supervisor_names)

tab_lineages, tab_silhouette = st.tabs(
    ["–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ä–µ–≤—å–µ–≤", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞—É—á–Ω—ã—Ö —à–∫–æ–ª"]
)

with tab_lineages:
    st.subheader("–í—ã–±–æ—Ä –Ω–∞—É—á–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–µ—Ä–µ–≤—å–µ–≤")
    roots = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–º–µ–Ω–∞ –∏–∑ –±–∞–∑—ã",
        options=sorted(all_supervisor_names),
        default=valid_shared_roots,  # –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ, –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞
        help="–°–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∏–∑ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º–∏",
    )
    manual = st.text_area(
        "–ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∏–º–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ (–ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É)",
        height=120,
        value=manual_prefill,
    )
    manual_list = [r.strip() for r in manual.splitlines() if r.strip()]
    roots = list(dict.fromkeys([*roots, *manual_list]))  # —É–±—Ä–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫

    build_clicked = st.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–µ—Ä–µ–≤—å—è", type="primary", key="build_trees")
    if build_clicked or shared_roots:
        st.session_state["built"] = True
    build = st.session_state.get("built", False)

    tree_option_labels = [label for label, _, _ in TREE_OPTIONS]
    selected_tree_labels = st.multiselect(
        "–¢–∏–ø—ã –¥–µ—Ä–µ–≤—å–µ–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è",
        options=tree_option_labels,
        default=[tree_option_labels[0]],
        help="–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–µ–ø–µ–Ω–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —É—Ä–æ–≤–Ω—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è.",
    )
    selected_tree_labels = selected_tree_labels or [tree_option_labels[0]]
    selected_tree_configs = [opt for opt in TREE_OPTIONS if opt[0] in selected_tree_labels]
    export_md_outline = st.checkbox("–¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ (.md)", value=False)

    if build:
        if not roots:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–º—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è.")
        else:
            all_zip_buf = io.BytesIO()
            zf = zipfile.ZipFile(all_zip_buf, mode="w", compression=zipfile.ZIP_DEFLATED)

            for root in roots:
                st.markdown("---")
                st.subheader(f"‚ñ∂ {root}")

                tree_results = []
                for label, suffix, first_level_filter in selected_tree_configs:
                    G, subset = lineage(
                        df, idx, root, first_level_filter=first_level_filter
                    )
                    tree_results.append(
                        {
                            "label": label,
                            "suffix": suffix,
                            "graph": G,
                            "subset": subset,
                        }
                    )

                root_slug = slug(root)
                person_entries: List[tuple[str, bytes]] = []
                has_content = False

                for tree in tree_results:
                    label = tree["label"]
                    suffix = tree["suffix"]
                    G = tree["graph"]
                    subset = tree["subset"]

                    if G.number_of_edges() == 0:
                        st.info(
                            f"{label}: –ø–æ—Ç–æ–º–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–µ—Ä–µ–≤–∞."
                        )
                        continue

                    has_content = True
                    st.markdown(f"#### üå≥ {label}")

                    fig = draw_matplotlib(G, root)
                    png_buf = io.BytesIO()
                    fig.savefig(png_buf, format="png", dpi=300, bbox_inches="tight")
                    png_bytes = png_buf.getvalue()

                    st.image(png_bytes, caption="–ú–∏–Ω–∏–∞—Ç—é—Ä–∞ PNG", width=220)

                    html = build_pyvis_html(G, root)
                    st.components.v1.html(html, height=800, width=2000, scrolling=True)
                    html_bytes = html.encode("utf-8")

                    csv_bytes = subset.to_csv(
                        index=False, encoding="utf-8-sig"
                    ).encode("utf-8-sig")

                    md_bytes = None
                    if export_md_outline:
                        out_lines: List[str] = []

                        def walk(n: str, d: int = 0) -> None:
                            out_lines.append(f"{'  ' * d}- {n}")
                            for c in G.successors(n):
                                walk(c, d + 1)

                        walk(root)
                        md_bytes = ("\n".join(out_lines)).encode("utf-8")

                    file_prefix = (
                        root_slug if suffix == "general" else f"{root_slug}.{suffix}"
                    )

                    c1, c2, c3, c4 = st.columns(4)
                    with c1:
                        st.download_button(
                            "–°–∫–∞—á–∞—Ç—å PNG",
                            data=png_bytes,
                            file_name=f"{file_prefix}.png",
                            mime="image/png",
                            key=f"png_{file_prefix}",
                        )
                    with c2:
                        st.download_button(
                            "–°–∫–∞—á–∞—Ç—å HTML",
                            data=html_bytes,
                            file_name=f"{file_prefix}.html",
                            mime="text/html",
                            key=f"html_{file_prefix}",
                        )
                    with c3:
                        st.download_button(
                            "–°–∫–∞—á–∞—Ç—å –≤—ã–±–æ—Ä–∫—É CSV",
                            data=csv_bytes,
                            file_name=f"{file_prefix}.sampling.csv",
                            mime="text/csv",
                            key=f"csv_{file_prefix}",
                        )
                    with c4:
                        if md_bytes is not None:
                            st.download_button(
                                "–°–∫–∞—á–∞—Ç—å –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ .md",
                                data=md_bytes,
                                file_name=f"{file_prefix}.xmind.md",
                                mime="text/markdown",
                                key=f"md_{file_prefix}",
                            )
                        else:
                            st.empty()

                    person_entries.append((f"{file_prefix}.png", png_bytes))
                    person_entries.append((f"{file_prefix}.html", html_bytes))
                    person_entries.append((f"{file_prefix}.sampling.csv", csv_bytes))
                    zf.writestr(f"{file_prefix}.png", png_bytes)
                    zf.writestr(f"{file_prefix}.html", html_bytes)
                    zf.writestr(f"{file_prefix}.sampling.csv", csv_bytes)
                    if md_bytes is not None:
                        person_entries.append((f"{file_prefix}.xmind.md", md_bytes))
                        zf.writestr(f"{file_prefix}.xmind.md", md_bytes)

                if not has_content:
                    continue

                person_zip: bytes | None = None
                if person_entries:
                    person_zip_buf = io.BytesIO()
                    try:
                        with zipfile.ZipFile(
                            person_zip_buf,
                            mode="w",
                            compression=zipfile.ZIP_DEFLATED,
                        ) as z_person:
                            for filename, data in person_entries:
                                z_person.writestr(filename, data)
                        person_zip = person_zip_buf.getvalue()
                    except Exception:
                        person_zip = None

                col_zip_person, col_share_person = st.columns([3, 1])
                with col_zip_person:
                    if person_zip is not None:
                        st.download_button(
                            label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –≤—Å—ë –∞—Ä—Ö–∏–≤–æ–º (ZIP)",
                            data=person_zip,
                            file_name=f"{root_slug}.zip",
                            mime="application/zip",
                            key=f"zip_{root_slug}",
                        )
                with col_share_person:
                    share_button([root], key=f"share_{root_slug}")

            zf.close()
            if all_zip_buf.getbuffer().nbytes > 0:
                col_zip, col_share = st.columns([3, 1])
                with col_zip:
                    st.download_button(
                        label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –≤—Å—ë –∞—Ä—Ö–∏–≤–æ–º (ZIP)",
                        data=all_zip_buf.getvalue(),
                        file_name="lineages_export.zip",
                        mime="application/zip",
                    )
                with col_share:
                    share_button(roots, key="share_all")
    else:
        st.info(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –∏–º–µ–Ω–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –Ω–∞–∂–º–∏—Ç–µ ‚Äò–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –¥–µ—Ä–µ–≤—å—è‚Äô."
        )

with tab_silhouette:
    st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞—É—á–Ω—ã—Ö —à–∫–æ–ª –ø–æ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–æ—Ñ–∏–ª—è–º")
    st.write(
        "–í–≤–µ–¥–∏—Ç–µ –¥–≤—É—Ö –Ω–∞—É—á–Ω—ã—Ö —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π, —á—Ç–æ–±—ã —Å—Ä–∞–≤–Ω–∏—Ç—å —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∏—Ö "
        "—à–∫–æ–ª –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É —Å–∏–ª—É—ç—Ç–∞. –ü–æ—Ç–æ–º–∫–∏ –±–µ—Ä—É—Ç—Å—è –∏–∑ –±–∞–∑—ã —Ä–æ–¥–æ—Å–ª–æ–≤–Ω—ã—Ö, –∞ –æ—Ü–µ–Ω–∫–∏ "
        "—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤ ‚Äî –∏–∑ CSV-—Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ `basic_scores`."
    )

    select_options = ["‚Äî"] + sorted(all_supervisor_names)
    col_left, col_right = st.columns(2)
    with col_left:
        root_a_choice = st.selectbox(
            "–ü–µ—Ä—Å–æ–Ω–∞ 1",
            options=select_options,
            index=0,
            help="–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∏–º—è –∏–∑ –±–∞–∑—ã –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –Ω–∏–∂–µ.",
            key="silhouette_root_a_choice",
        )
        root_a_manual = st.text_input(
            "–ü–µ—Ä—Å–æ–Ω–∞ 1 (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥)",
            value="",
            placeholder="–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ",
            key="silhouette_root_a_manual",
        )
    with col_right:
        root_b_choice = st.selectbox(
            "–ü–µ—Ä—Å–æ–Ω–∞ 2",
            options=select_options,
            index=0,
            help="–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∏–º—è –∏–∑ –±–∞–∑—ã –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –Ω–∏–∂–µ.",
            key="silhouette_root_b_choice",
        )
        root_b_manual = st.text_input(
            "–ü–µ—Ä—Å–æ–Ω–∞ 2 (—Ä—É—á–Ω–æ–π –≤–≤–æ–¥)",
            value="",
            placeholder="–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ",
            key="silhouette_root_b_manual",
        )

    def _resolve_root(choice: str, manual: str) -> str:
        manual_clean = manual.strip()
        if manual_clean:
            return manual_clean
        choice_clean = choice.strip()
        return choice_clean if choice_clean and choice_clean != "‚Äî" else ""

    root_a = _resolve_root(root_a_choice, root_a_manual)
    root_b = _resolve_root(root_b_choice, root_b_manual)

    metric_options = {
        "cosine": "–ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ",
        "euclidean": "–ï–≤–∫–ª–∏–¥–æ–≤–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ",
    }
    metric_key = st.selectbox(
        "–ú–µ—Ç—Ä–∏–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è",
        options=list(metric_options.keys()),
        format_func=lambda m: metric_options[m],
        index=0,
        key="silhouette_metric",
    )

    run_analysis = st.button(
        "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∏–ª—É—ç—Ç–∞",
        type="primary",
        key="run_silhouette_analysis",
    )

    if run_analysis:
        if not root_a or not root_b:
            st.warning("–£–∫–∞–∂–∏—Ç–µ –¥–≤–µ —Ä–∞–∑–Ω—ã–µ –Ω–∞—É—á–Ω—ã–µ —à–∫–æ–ª—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
        elif root_a == root_b:
            st.warning("–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω—É–∂–Ω—ã –¥–≤–µ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∏.")
        else:
            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π..."):
                try:
                    scores_df = load_basic_scores()
                except Exception as exc:
                    st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏: {exc}")
                    scores_df = None

                if scores_df is not None:
                    dataset_a, missing_a, total_a = gather_school_dataset(
                        df, idx, root_a, scores_df
                    )
                    dataset_b, missing_b, total_b = gather_school_dataset(
                        df, idx, root_b, scores_df
                    )

                    messages: list[str] = []
                    if total_a == 0:
                        messages.append(
                            f"–î–ª—è —à–∫–æ–ª—ã {root_a} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏–∏-–ø–æ—Ç–æ–º–∫–∏ –≤ –±–∞–∑–µ."
                        )
                    if total_b == 0:
                        messages.append(
                            f"–î–ª—è —à–∫–æ–ª—ã {root_b} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏–∏-–ø–æ—Ç–æ–º–∫–∏ –≤ –±–∞–∑–µ."
                        )
                    if messages:
                        st.warning("\n".join(messages))

                    combined = pd.concat([dataset_a, dataset_b], ignore_index=True)
                    if combined.empty:
                        st.info(
                            "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —Å–∏–ª—É—ç—Ç–∞."
                        )
                    else:
                        feature_columns = [c for c in scores_df.columns if c != "Code"]
                        combined = combined.dropna(subset=["Code"])
                        combined = combined.drop_duplicates(subset="Code")
                        combined["candidate_name"] = combined["candidate_name"].fillna("")
                        combined["school"] = combined["school"].astype(str)

                        label_mapping = {root_a: 0, root_b: 1}
                        combined["label"] = combined["school"].map(label_mapping)

                        analysis_valid = True
                        if combined["label"].isna().any():
                            st.error(
                                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤—Å–µ –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —à–∫–æ–ª–∞–º–∏."
                            )
                            analysis_valid = False

                        if analysis_valid and combined["label"].nunique() < 2:
                            st.warning(
                                "–í –≤—ã–±–æ—Ä–∫—É –ø–æ–ø–∞–ª–∏ –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–π —à–∫–æ–ª—ã ‚Äî —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ."
                            )
                            analysis_valid = False

                        if analysis_valid and len(combined) < 2:
                            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏–π –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏.")
                            analysis_valid = False

                        if analysis_valid:
                            X = combined[feature_columns].to_numpy(dtype=float)
                            labels_array = combined["label"].to_numpy(dtype=int)

                            try:
                                sample_scores = silhouette_samples(
                                    X, labels_array, metric=metric_key
                                )
                                overall_score = float(
                                    silhouette_score(
                                        X, labels_array, metric=metric_key
                                    )
                                )
                            except Exception as exc:
                                st.error(
                                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —Å–∏–ª—É—ç—Ç–∞: {exc}"
                                )
                                analysis_valid = False

                        if analysis_valid:
                            combined["silhouette"] = sample_scores

                            counts = combined["school"].value_counts()
                            mean_by_school = combined.groupby("school")[
                                "silhouette"
                            ].mean()

                            summary_cols = st.columns(3)
                            with summary_cols[0]:
                                st.metric(
                                    "–°—Ä–µ–¥–Ω–∏–π silhouette (–æ–±—â–∏–π)",
                                    f"{overall_score:.3f}",
                                    delta=f"n={len(combined)}",
                                )
                            with summary_cols[1]:
                                st.metric(
                                    f"{root_a}",
                                    f"{mean_by_school.get(root_a, float('nan')):.3f}",
                                    delta=f"n={counts.get(root_a, 0)}",
                                )
                            with summary_cols[2]:
                                st.metric(
                                    f"{root_b}",
                                    f"{mean_by_school.get(root_b, float('nan')):.3f}",
                                    delta=f"n={counts.get(root_b, 0)}",
                                )

                            if not missing_a.empty or not missing_b.empty:
                                warn_parts: list[str] = []
                                if not missing_a.empty:
                                    warn_parts.append(
                                        f"–£ —à–∫–æ–ª—ã {root_a} –Ω–µ—Ç —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è {len(missing_a)} –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏–π."
                                    )
                                if not missing_b.empty:
                                    warn_parts.append(
                                        f"–£ —à–∫–æ–ª—ã {root_b} –Ω–µ—Ç —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è {len(missing_b)} –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏–π."
                                    )
                                st.warning("\n".join(warn_parts))

                                with st.expander(
                                    "–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏–∏ –±–µ–∑ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ü–µ–Ω–æ–∫"
                                ):
                                    if not missing_a.empty:
                                        st.markdown(f"**{root_a}**")
                                        st.dataframe(
                                            missing_a.rename(
                                                columns={
                                                    "Code": "–ö–æ–¥ –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏–∏",
                                                    "candidate_name": "–ê–≤—Ç–æ—Ä",
                                                }
                                            ),
                                            use_container_width=True,
                                        )
                                    if not missing_b.empty:
                                        st.markdown(f"**{root_b}**")
                                        st.dataframe(
                                            missing_b.rename(
                                                columns={
                                                    "Code": "–ö–æ–¥ –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏–∏",
                                                    "candidate_name": "–ê–≤—Ç–æ—Ä",
                                                }
                                            ),
                                            use_container_width=True,
                                        )

                            display_df = (
                                combined[
                                    ["Code", "candidate_name", "school", "silhouette"]
                                ]
                                .sort_values(
                                    by=["school", "silhouette"],
                                    ascending=[True, False],
                                )
                                .rename(
                                    columns={
                                        "Code": "–ö–æ–¥ –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏–∏",
                                        "candidate_name": "–ê–≤—Ç–æ—Ä",
                                        "school": "–®–∫–æ–ª–∞",
                                        "silhouette": "Silhouette",
                                    }
                                )
                            )
                            display_df["Silhouette"] = display_df["Silhouette"].map(
                                lambda x: round(float(x), 4)
                            )

                            st.markdown("### –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏—è–º")
                            st.dataframe(display_df, use_container_width=True)

                            csv_bytes = display_df.to_csv(
                                index=False, encoding="utf-8-sig"
                            ).encode("utf-8-sig")
                            slug_a = slug(root_a) or "school_a"
                            slug_b = slug(root_b) or "school_b"
                            st.download_button(
                                "–°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É (CSV)",
                                data=csv_bytes,
                                file_name=f"silhouette_{slug_a}_vs_{slug_b}.csv",
                                mime="text/csv",
                                key="silhouette_download_csv",
                            )

                            st.markdown("### –î–∏–∞–≥—Ä–∞–º–º–∞ —Å–∏–ª—É—ç—Ç–∞")
                            fig = make_silhouette_plot(
                                sample_scores,
                                labels_array,
                                [root_a, root_b],
                                overall_score,
                                metric_key,
                            )
                            st.pyplot(fig, use_container_width=True)
                            plot_buf = io.BytesIO()
                            fig.savefig(
                                plot_buf, format="png", dpi=300, bbox_inches="tight"
                            )
                            st.download_button(
                                "–°–∫–∞—á–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É (PNG)",
                                data=plot_buf.getvalue(),
                                file_name=f"silhouette_{slug_a}_vs_{slug_b}.png",
                                mime="image/png",
                                key="silhouette_download_plot",
                            )

